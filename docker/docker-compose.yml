services:
  nginx:
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    build:
      context: ./configs/nginx
      dockerfile: Dockerfile
    volumes:
      - ./../files:/var/www:rw
      - ./configs/nginx/conf.d/:/etc/nginx/conf.d/
    ports:
      - ${NGINX_PORT1:-80}:80
    networks:
      - custom
    depends_on:
      - php-fpm
    profiles:
      - backend
      - frontend

  php-fpm: # @todo update to 8.2
    container_name: ${COMPOSE_PROJECT_NAME}_php-fpm
    build:
      context: ./configs/php-fpm
      dockerfile: Dockerfile
      target: ${COMPOSE_PROJECT_TYPE} # prod\dev
    volumes:
      - ./../files:/var/www
    networks:
      - custom
    depends_on:
      - mysql
    profiles:
      - backend
      - frontend

  mysql:
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    build:
      context: ./configs/mysql
      dockerfile: Dockerfile
    volumes:
      - ./data/mysql:/var/lib/mysql:rw
      - ./configs/mysql/:/docker-entrypoint-initdb.d/:ro
      - ./../files:/var/www
    ports:
      - ${MYSQL_PORT1:-3306}:3306
    env_file:
      - .env
    networks:
      - custom
    profiles:
      - backend
      - frontend
  
  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    build:
      context: ./configs/postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      PGDATA: /data/postgres
    volumes:
      - ./data/postgres:/data/postgres:rw
    ports:
      - ${POSTGRES_PORT1:-5432}:5432
    profiles:
      - backend
      - frontend
    networks:
      - custom

  mongodb:
    container_name: ${COMPOSE_PROJECT_NAME}_mongodb
    build:
      context: ./configs/mongodb
      dockerfile: Dockerfile
    volumes:
      - ./data/mongodb:/data/db:rw
      - ./configs/mongodb/init.js:/docker-entrypoint-initdb.d/init.js:ro
    ports:
      - ${MONGO_PORT1:-27017}:27017
    networks:
      - custom
    env_file:
      - .env

  memcached:
    container_name: ${COMPOSE_PROJECT_NAME}_memcached
    build:
      context: ./configs/memcached
      dockerfile: Dockerfile
    command:
      - --conn-limit=1024
      - --memory-limit=64
      - --threads=4
    networks:
      - custom
  
  # postgres: #todo add
  # check .dockerignore can be used in volume or dockerfile-copy

  manticoresearch:
    container_name: ${COMPOSE_PROJECT_NAME}_manticoresearch
    build:
      context: ./configs/manticoresearch
      dockerfile: Dockerfile
    volumes:
      - ./data/manticoresearch:/var/lib/manticore
      - ./configs/manticoresearch/manticore.conf:/etc/manticoresearch/manticore.conf
    ports:
      - ${MANTICORE_SEARCH_PORT1:-9306}:9306
      - ${MANTICORE_SEARCH_PORT2:-9308}:9308
    networks:
      - custom
  
  nodejs:
    container_name: ${COMPOSE_PROJECT_NAME}_nodejs
    build:
      context: ./configs/nodejs
      dockerfile: Dockerfile
    ports:
      - ${NODE_JS_PORT1:-3000}:3000
    volumes:
      - ./../files:/var/www
    working_dir: /var/www
    tty: true
    networks:
      - custom
    profiles:
      - frontend

  valkey:
    container_name: ${COMPOSE_PROJECT_NAME}_valkey
    build:
      context: ./configs/valkey
      dockerfile: Dockerfile
      args:
        - default_password=${VALKEY_USER_PASSWORD}
        - user_name=${VALKEY_USER_NAME}
        - user_password=${VALKEY_USER_PASSWORD}
    ports:
      - ${VALKEY_PORT1:-6379}:6379
    volumes:
      - ./data/valkey:/data
    stdin_open: true
    networks:
      - custom

networks:
  custom:
    name: ${COMPOSE_PROJECT_NAME}_network
    driver: bridge